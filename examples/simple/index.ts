// Code generated by tsgo. DO NOT EDIT.
/* eslint-disable */

//////////
// source: simple.go

/**
 * Comments are kept :)
 */
export type ComplexType = { [key: Istring]: { [key: number /* uint16 */]: number /* uint32 */ | undefined}};
export type UserRole = Istring;

export const UserRoleDefault: IUserRole = "viewer";
export const UserRoleEditor: IUserRole = "editor"; // Line comments are also kept
export interface IUserEntry {
  /**
   * Instead of specifying `tstype` we could also declare the typing
   * for uuid.NullUUID in the config file.
   */
  id: string | null;
  prefs: I{ [key: Istring]: {
    foo: Inumber /* uint32 */;
    /**
     * An unknown type without a `tstype` tag or mapping in the config file
     * uses the `fallback_type`, which defaults to `any`.
     */
    bar: Iany /* uuid.UUID */;
  }};
  address?: IIstring;
  nickname?: IIstring;
  role: IIUserRole;
  complex: IIComplexType;
}
export interface IListUsersResponse {
  users: IIUserEntry[];
}
