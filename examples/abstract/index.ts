// Code generated by tsgo. DO NOT EDIT.
import { dlopen, FFIType } from 'bun:ffi';
export type Something = string | number;

//////////
// source: iota.go

export type MyIotaType = number /* int */;
export enum MyEnum {
  Zero = 0,
  One = 1,
  Two = 2,
  Four = 4,
  FourString = "four",
  AlsoFourString = "four",
  Five = 5,
  FiveAgain = 5,
  Sixteen = 16,
  Seventeen = 17
}

//////////
// source: misc.go
/*
Package level
Second line of package level comment.
*/

/**
 * Comment belonging to Foo
 */
export type Foo = string;
export type FooInt64 = number /* int64 */;
export enum FooEnum {
  /**
   * Comment for the const group declaration
   */
  ConstNumberValue = 123, // Line comment behind field with value 123
  /**
   * Individual comment for field ConstStringValue
   */
  ConstStringValue = "abc",
  /**
   * Comment for the const group declaration
   */
  ConstFooValue = "foo_const_value"
}
export const Alice = "Alice"
/**
 * Multiline comment for StructBar
 * Some more text
 */
export interface StructBar {
  /**
   * Comment for field Field of type Foo
   */
  field: Foo; // Line Comment for field Field of type Foo
  weird: number /* int64 */;
  field_that_should_be_optional?: string;
  field_that_should_not_be_optional: string;
  readonly field_that_should_be_readonly: string;
}

//////////
// Generated config for Bun FFI

export const {
  symbols: {
    _Int64ArrayTest,
    _StringTest,
    _Int64ArgTest,
    _Float32ArrayTest,
    arraySize,
    _Int32ArrayTest,
    _Float32ArgTest,
    genDisposePtr,
    _Float64ArrayTest,
    _TestMap,
    _Uint64ArrayTest,
    _Float64ArgTest,
    _Int32ArgTest,
    _Uint32ArgTest,
    _Uint64ArgTest,
    _TestStruct,
    _IntTest,
    _Uint32ArrayTest
  }
} = dlopen(import.meta.dir + '/abstract/gen_bindings.dylib', {
  _Uint32ArgTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _Uint64ArgTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _TestStruct: {
    returns: unsafe.Pointer

  },
  _IntTest: {
    args: [FFIType.ptr],
    returns: C.int

  },
  _Uint32ArrayTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _Int32ArgTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _StringTest: {
    returns: *C.char

  },
  _Int64ArgTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _Float32ArrayTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  arraySize: {
    args: [FFIType.ptr],
    returns: FFIType.u64_fast

  },
  _Int64ArrayTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _Float32ArgTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  genDisposePtr: {
    returns: FFIType.ptr

  },
  _Float64ArrayTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _Int32ArrayTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _Uint64ArrayTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _Float64ArgTest: {
    args: [FFIType.ptr],
    returns: unsafe.Pointer

  },
  _TestMap: {
    returns: *C.char

  }
})
